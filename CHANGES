=====================================================================
NEW IN VERSION 9
=====================================================================
- Changed the faddeeva function result variable in the micro_xs
  lookup kernel to a complex double type, rather than simply a 
  double for proper arithmetic. Has a very small (several percent)
  change in performance.

=====================================================================
NEW IN VERSION 8
=====================================================================
- Fixed a bug in initialization of one of the randomized arrays.
  It was originally being allocated correctly but not properly
  set to fully randomized values, instead just using whatever values
  were in memory at the time (often zero). This has a very small,
  but non-negligible, imact on performance.

=====================================================================
NEW IN VERSION 7
=====================================================================
- Temperature dependence default status has been reverted. Doppler
  broadening / temperature dependence is now ON by default. This
  means the Faddeeva function will be called by default.

- The MIT Open Source Faddeeva function library used in Version
  6 is no longer used, and that code has been removed. While accurate,
  it was very slow, so we are using a much faster approximation.
  This approximation loosens some of the restrictions due to the
  nature of actual reactor physics calculations not needing full
  machine precision.  The new algorithm now uses a fast three term
  asymptotic approximation when the absolute value of Z is
  less than 6.  For |z| > 6, a much higher precision computation
  is done using the Abrarov approximation. The slower Abrarov region
  of complex space is only expected to be hit 0.0027% to 0.5% of the
  time. The randomized resonance data in RSBench has been tuned to
  approximate this frequency (assuming worst case 0.5%) of usage.

- Added counters and a printout to calculate the percentage of
  faddeeva calls that have |z| < 6, thus requiring the higher
  fidelity and slower calculation. Changes made to the code during
  porting (particularly if changing RNGs) should ensure that this
  percentage remains approximately constant.

=====================================================================
NEW IN VERSION 6
=====================================================================
- Temperature dependence has now been changed to off by default

- The Faddeeva function evaluation has now been moved to an open
  source library (included in this repo). This allows for true
  complex evaluation of the pole data rather than the real conjugate
  error function approximation previously used. It was previously
  assumed that real erfc() could be used to approximate the full
  computation of the complex version, but in reality it has been
  found to be siginificantly more computationally difficult to compute
  this function when complex space is added. As a result, this slows
  down computation significantly.

- Note that the new source files and Temperature dependence changes
  DO NOT AFFECT the single temp (no Doppler) mode.

=====================================================================
NEW IN VERSION 5
=====================================================================
- Added a new temperature dependence feature that
uses Doppler broadening to translate pole data from 0K to any
arbitrary material temperature. This is accomplished by evaluating
the Faddeeva function (via an exponential multiplied by the standard
C error function).

This new Doppler mode is by default enabled in Version 5.  It is
set to default, but can be disabled via the "-d" flag on the command
line.

Impact varies by compiler, but is relatively small (only a
~10-15% slowdown).

- Changed the default runtime parameters from 250 windows per nuclide
down to 100 windows per nuclide (increasing the number of poles
per lookup from an average of 4 to an average of 10). This
directly impacts performance, so expect lookups/sec to change in
Version 5 as compared to Version 4. This change was made as more
nuclides have had multipole data generated for them in the time
since RSBench was originally written, so estimates for these variables
have been updated to more accurately reflect the full scale code.

=====================================================================
NEW IN VERSION 4
=====================================================================
- Minor bug fix that caused incorrect operation when compiled with
GCC (intel worked fine). This was due to a bug in OpenMP causing
private variables to not be correctly copied into the parallel
region. The result was that the RNG was improperly initialized,
generating the same value every time, speeding up the calculation
significantly. Intel's OMP implementation was correct so all
results from intel runs should have the same performance.

=====================================================================
NEW IN VERSION 3
=====================================================================
- [Bug Fix] Fixed an issue with the window pole assignment
function (generate_window_params). There was a counter that was
not being properly incremented, causing some windows to be
assigned the same poles, and causing an issue with a border case
receiving many more poles than others. This issue has been fixed
so that all windows should now recieve about the same number of
poles, and all windows should be unique. This change effects
performance slightly, showing a 10-15% speedup in version 3
vs. version 2.


=====================================================================
NEW IN VERSION 2
=====================================================================
- [Optimization] Moved the sigTfactor dynamic array allocation out
  of the inner program loop and back up to the top so millions of
  allocs/free's are saved. This appears to increase performance
  significantly (~33%) when compared to v1.
=====================================================================

